"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@meilisearch";
exports.ids = ["vendor-chunks/@meilisearch"];
exports.modules = {

/***/ "(ssr)/./node_modules/@meilisearch/instant-meilisearch/dist/instant-meilisearch.esm.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@meilisearch/instant-meilisearch/dist/instant-meilisearch.esm.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   instantMeiliSearch: () => (/* binding */ instantMeiliSearch)\n/* harmony export */ });\n/* harmony import */ var meilisearch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! meilisearch */ \"(ssr)/./node_modules/meilisearch/dist/bundles/meilisearch.cjs.js\");\n\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\n\nvar removeUndefined = function (arr) {\r\n    return arr.filter(function (x) { return x !== undefined; });\r\n};\n\n/**\r\n * @param  {any} str\r\n * @returns {boolean}\r\n */\r\n/**\r\n * @param  {string} filter\r\n * @returns {string}\r\n */\r\nfunction replaceColonByEqualSign(filter) {\r\n    // will only change first occurence of `:`\r\n    return filter.replace(/:(.*)/i, '=\"$1\"');\r\n}\r\n/**\r\n * @param  {any[]} arr\r\n * @returns {string}\r\n */\r\nfunction stringifyArray(arr) {\r\n    return arr.reduce(function (acc, curr) {\r\n        return (acc += JSON.stringify(curr));\r\n    }, '');\r\n}\n\n/**\r\n * @param  {number} dividend\r\n * @param  {number} divisor\r\n * @returns number\r\n */\r\nfunction ceiledDivision(dividend, divisor) {\r\n    if (divisor > 0) {\r\n        var NumberPages = Math.ceil(dividend / divisor); // total number of pages rounded up to the next largest integer.\r\n        return NumberPages;\r\n    }\r\n    return 0;\r\n}\n\nfunction isPureObject(data) {\r\n    return typeof data === 'object' && !Array.isArray(data) && data !== null;\r\n}\n\n/**\r\n * @param  {string} filter\r\n */\r\nvar adaptFilterSyntax = function (filter) {\r\n    var matches = filter.match(/([^=]*)=\"?([^\\\\\"]*)\"?$/);\r\n    if (matches) {\r\n        matches[0]; var filterName = matches[1], value = matches[2];\r\n        return [{ filterName: filterName, value: value }];\r\n    }\r\n    return [];\r\n};\r\n/**\r\n * @param  {Filter} filters?\r\n * @returns {Array}\r\n */\r\nfunction extractFilters(filters) {\r\n    if (typeof filters === 'string') {\r\n        return adaptFilterSyntax(filters);\r\n    }\r\n    else if (Array.isArray(filters)) {\r\n        return filters\r\n            .map(function (nestedFilter) {\r\n            if (Array.isArray(nestedFilter)) {\r\n                return nestedFilter.map(function (filter) { return adaptFilterSyntax(filter); });\r\n            }\r\n            return adaptFilterSyntax(nestedFilter);\r\n        })\r\n            .flat(2);\r\n    }\r\n    return [];\r\n}\r\n/**\r\n * @param  {Filter} filters?\r\n * @returns {FacetsCache}\r\n */\r\nfunction getFacetsFromFilter(filters) {\r\n    var extractedFilters = extractFilters(filters);\r\n    var cleanFilters = removeUndefined(extractedFilters);\r\n    return cleanFilters.reduce(function (cache, parsedFilter) {\r\n        var _a;\r\n        var filterName = parsedFilter.filterName, value = parsedFilter.value;\r\n        var prevFields = cache[filterName] || [];\r\n        cache = __assign(__assign({}, cache), (_a = {}, _a[filterName] = __spreadArray(__spreadArray([], prevFields, true), [value]), _a));\r\n        return cache;\r\n    }, {});\r\n}\r\nfunction getFacetsFromDefaultDistribution(facetsDistribution) {\r\n    return Object.keys(facetsDistribution).reduce(function (cache, facet) {\r\n        var _a;\r\n        var facetValues = Object.keys(facetsDistribution[facet]);\r\n        return __assign(__assign({}, cache), (_a = {}, _a[facet] = facetValues, _a));\r\n    }, {});\r\n}\r\n/**\r\n * @param  {Filter} filters?\r\n * @returns {FacetsCache}\r\n */\r\nfunction extractFacets(searchContext, searchParams) {\r\n    if (searchContext.keepZeroFacets) {\r\n        return getFacetsFromDefaultDistribution(searchContext.defaultFacetDistribution);\r\n    }\r\n    else {\r\n        return getFacetsFromFilter(searchParams === null || searchParams === void 0 ? void 0 : searchParams.filter);\r\n    }\r\n}\r\n/**\r\n * Assign missing filters to facetsDistribution.\r\n * All facet passed as filter should appear in the facetsDistribution.\r\n * If not present, the facet is added with 0 as value.\r\n *\r\n *\r\n * @param  {FacetsCache} cache?\r\n * @param  {FacetsDistribution} distribution?\r\n * @returns {FacetsDistribution}\r\n */\r\nfunction addMissingFacets(cachedFacets, distribution) {\r\n    distribution = distribution || {};\r\n    // If cachedFacets contains something\r\n    if (cachedFacets && Object.keys(cachedFacets).length > 0) {\r\n        // for all filters in cached filters\r\n        for (var cachedFacet in cachedFacets) {\r\n            // if facet does not exist on returned distribution, add an empty object\r\n            if (!distribution[cachedFacet])\r\n                distribution[cachedFacet] = {};\r\n            // for all fields in every filter\r\n            for (var _i = 0, _a = cachedFacets[cachedFacet]; _i < _a.length; _i++) {\r\n                var cachedField = _a[_i];\r\n                // if the field is not present in the returned distribution\r\n                // set it at 0\r\n                if (!Object.keys(distribution[cachedFacet]).includes(cachedField)) {\r\n                    // add 0 value\r\n                    distribution[cachedFacet][cachedField] = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return distribution;\r\n}\n\nvar emptySearch = {\r\n    hits: [],\r\n    query: '',\r\n    facetsDistribution: {},\r\n    limit: 0,\r\n    offset: 0,\r\n    exhaustiveNbHits: false,\r\n    nbHits: 0,\r\n    processingTimeMs: 0\r\n};\r\n/**\r\n * @param  {ResponseCacher} cache\r\n */\r\nfunction SearchResolver(cache) {\r\n    return {\r\n        /**\r\n         * @param  {SearchContext} searchContext\r\n         * @param  {MeiliSearchParams} searchParams\r\n         * @param  {MeiliSearch} client\r\n         * @returns {Promise}\r\n         */\r\n        searchResponse: function (searchContext, searchParams, client) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var placeholderSearch, query, pagination, paginationCache, key, cachedResponse, facetsCache, searchResponse;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            placeholderSearch = searchContext.placeholderSearch, query = searchContext.query;\r\n                            // query can be: empty string, undefined or null\r\n                            // all of them are falsy's\r\n                            if (!placeholderSearch && !query) {\r\n                                return [2 /*return*/, emptySearch];\r\n                            }\r\n                            pagination = searchContext.pagination;\r\n                            paginationCache = searchContext.finitePagination ? {} : pagination;\r\n                            key = cache.formatKey([\r\n                                searchParams,\r\n                                searchContext.indexUid,\r\n                                searchContext.query,\r\n                                paginationCache,\r\n                            ]);\r\n                            cachedResponse = cache.getEntry(key);\r\n                            // Check if specific request is already cached with its associated search response.\r\n                            if (cachedResponse)\r\n                                return [2 /*return*/, cachedResponse];\r\n                            facetsCache = extractFacets(searchContext, searchParams);\r\n                            return [4 /*yield*/, client\r\n                                    .index(searchContext.indexUid)\r\n                                    .search(searchContext.query, searchParams)\r\n                                // Add missing facets back into facetsDistribution\r\n                            ];\r\n                        case 1:\r\n                            searchResponse = _a.sent();\r\n                            // Add missing facets back into facetsDistribution\r\n                            searchResponse.facetsDistribution = addMissingFacets(facetsCache, searchResponse.facetsDistribution);\r\n                            // Cache response\r\n                            cache.setEntry(key, searchResponse);\r\n                            return [2 /*return*/, searchResponse];\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n}\n\n/**\r\n * @param  {number} rad\r\n * @returns {number}\r\n */\r\nfunction rad2degr(rad) {\r\n    return (rad * 180) / Math.PI;\r\n}\r\n/**\r\n * @param  {number} degr\r\n * @returns {number}\r\n */\r\nfunction degr2rad(degr) {\r\n    return (degr * Math.PI) / 180;\r\n}\r\n/**\r\n * @param  {number} lat1\r\n * @param  {number} lng1\r\n * @param  {number} lat2\r\n * @param  {number} lng2\r\n * @returns {string}\r\n */\r\nfunction middleGeoPoints(lat1, lng1, lat2, lng2) {\r\n    // convert to radians\r\n    lat1 = degr2rad(lat1);\r\n    lng1 = degr2rad(lng1);\r\n    var x1 = Math.cos(lat1) * Math.cos(lng1);\r\n    var y1 = Math.cos(lat1) * Math.sin(lng1);\r\n    var z1 = Math.sin(lat1);\r\n    // convert to radians\r\n    lat2 = degr2rad(lat2);\r\n    lng2 = degr2rad(lng2);\r\n    var x2 = Math.cos(lat2) * Math.cos(lng2);\r\n    var y2 = Math.cos(lat2) * Math.sin(lng2);\r\n    var z2 = Math.sin(lat2);\r\n    var x = x1 + x2;\r\n    var y = y1 + y2;\r\n    var z = z1 + z2;\r\n    var Hyp = Math.sqrt(x * x + y * y);\r\n    var lng3 = Math.atan2(y, x);\r\n    var lat3 = Math.atan2(z, Hyp);\r\n    if (lng1 < lng2 || (lng1 > lng2 && lng1 > Math.PI && lng2 < -Math.PI)) {\r\n        lat3 = lat3 + Math.PI;\r\n        lng3 = lng3 + Math.PI;\r\n    }\r\n    else {\r\n        lat3 = rad2degr(lat3);\r\n        lng3 = rad2degr(lng3);\r\n    }\r\n    if (Math.abs(x) < Math.pow(10, -9) &&\r\n        Math.abs(y) < Math.pow(10, -9) &&\r\n        Math.abs(z) < Math.pow(10, -9)) {\r\n        lat3 = 0;\r\n        lng3 = 0;\r\n    }\r\n    return \"\".concat(lat3, \",\").concat(lng3);\r\n}\r\n/**\r\n * @param  {number} lat1\r\n * @param  {number} lng1\r\n * @param  {number} lat2\r\n * @param  {number} lng2\r\n * @returns {number}\r\n */\r\nfunction getDistanceInMeter(lat1, lng1, lat2, lng2) {\r\n    // Haversine Algorithm\r\n    var R = 6371e3; // metres\r\n    var latRad1 = (lat1 * Math.PI) / 180;\r\n    var latRad2 = (lat2 * Math.PI) / 180;\r\n    var latCenterRad = ((lat2 - lat1) * Math.PI) / 180;\r\n    var lngCenterRad = ((lng2 - lng1) * Math.PI) / 180;\r\n    var a = Math.sin(latCenterRad / 2) * Math.sin(latCenterRad / 2) +\r\n        Math.cos(latRad1) *\r\n            Math.cos(latRad2) *\r\n            Math.sin(lngCenterRad / 2) *\r\n            Math.sin(lngCenterRad / 2);\r\n    var bearing = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    var distance = R * bearing; // in metres\r\n    return distance;\r\n}\n\nfunction adaptGeoPointsRules(geoSearchContext) {\r\n    if (!geoSearchContext) {\r\n        return undefined;\r\n    }\r\n    var insideBoundingBox = geoSearchContext.insideBoundingBox, aroundLatLng = geoSearchContext.aroundLatLng, aroundRadius = geoSearchContext.aroundRadius, minimumAroundRadius = geoSearchContext.minimumAroundRadius;\r\n    var middlePoint;\r\n    var radius;\r\n    if (aroundLatLng) {\r\n        middlePoint = aroundLatLng;\r\n    }\r\n    if (aroundRadius != null || minimumAroundRadius != null) {\r\n        if (aroundRadius != null)\r\n            radius = aroundRadius;\r\n        else\r\n            radius = minimumAroundRadius;\r\n    }\r\n    // If insideBoundingBox is provided it takes precedent over all other options\r\n    if (insideBoundingBox && typeof insideBoundingBox === 'string') {\r\n        var _a = insideBoundingBox.split(','), lat1Raw = _a[0], lng1Raw = _a[1], lat2Raw = _a[2], lng2Raw = _a[3];\r\n        var _b = [\r\n            parseFloat(lat1Raw),\r\n            parseFloat(lng1Raw),\r\n            parseFloat(lat2Raw),\r\n            parseFloat(lng2Raw),\r\n        ], lat1 = _b[0], lng1 = _b[1], lat2 = _b[2], lng2 = _b[3];\r\n        radius = getDistanceInMeter(lat1, lng1, lat2, lng2) / 2;\r\n        middlePoint = middleGeoPoints(lat1, lng1, lat2, lng2);\r\n    }\r\n    if (middlePoint != null && radius != null) {\r\n        var _c = middlePoint.split(','), lat3 = _c[0], lng3 = _c[1];\r\n        lat3 = Number.parseFloat(lat3).toFixed(5);\r\n        lng3 = Number.parseFloat(lng3).toFixed(5);\r\n        var filter = \"_geoRadius(\".concat(lat3, \", \").concat(lng3, \", \").concat(radius, \")\");\r\n        return { filter: filter };\r\n    }\r\n    return undefined;\r\n}\r\nfunction createGeoSearchContext(searchContext) {\r\n    var geoContext = {};\r\n    var aroundLatLng = searchContext.aroundLatLng, aroundLatLngViaIP = searchContext.aroundLatLngViaIP, aroundRadius = searchContext.aroundRadius, aroundPrecision = searchContext.aroundPrecision, minimumAroundRadius = searchContext.minimumAroundRadius, insideBoundingBox = searchContext.insideBoundingBox, insidePolygon = searchContext.insidePolygon;\r\n    if (aroundLatLng) {\r\n        geoContext.aroundLatLng = aroundLatLng;\r\n    }\r\n    if (aroundLatLngViaIP) {\r\n        console.warn('instant-meilisearch: `aroundLatLngViaIP` is not supported.');\r\n    }\r\n    if (aroundRadius) {\r\n        geoContext.aroundRadius = aroundRadius;\r\n    }\r\n    if (aroundPrecision) {\r\n        console.warn(\"instant-meilisearch: `aroundPrecision` is not supported.\\n    See this discussion to track its implementation https://github.com/meilisearch/product/discussions/264\");\r\n    }\r\n    if (minimumAroundRadius) {\r\n        geoContext.minimumAroundRadius = minimumAroundRadius;\r\n    }\r\n    if (insideBoundingBox) {\r\n        geoContext.insideBoundingBox = insideBoundingBox;\r\n    }\r\n    // See related issue: https://github.com/meilisearch/instant-meilisearch/issues/555\r\n    if (insidePolygon) {\r\n        console.warn(\"instant-meilisearch: `insidePolygon` is not implented in instant-meilisearch.\");\r\n    }\r\n    return geoContext;\r\n}\n\n/**\r\n * Transform InstantSearch filter to Meilisearch filter.\r\n * Change sign from `:` to `=` in nested filter object.\r\n * example: [`genres:comedy`] becomes [`genres=comedy`]\r\n *\r\n * @param  {SearchContext['facetFilters']} filters?\r\n * @returns {Filter}\r\n */\r\nfunction transformFilter(filters) {\r\n    if (typeof filters === 'string') {\r\n        return replaceColonByEqualSign(filters);\r\n    }\r\n    else if (Array.isArray(filters))\r\n        return filters\r\n            .map(function (filter) {\r\n            if (Array.isArray(filter))\r\n                return filter\r\n                    .map(function (nestedFilter) { return replaceColonByEqualSign(nestedFilter); })\r\n                    .filter(function (elem) { return elem; });\r\n            else {\r\n                return replaceColonByEqualSign(filter);\r\n            }\r\n        })\r\n            .filter(function (elem) { return elem; });\r\n    return [];\r\n}\r\n/**\r\n * Return the filter in an array if it is a string\r\n * If filter is array, return without change.\r\n *\r\n * @param  {Filter} filter\r\n * @returns {Array}\r\n */\r\nfunction filterToArray(filter) {\r\n    // Filter is a string\r\n    if (filter === '')\r\n        return [];\r\n    else if (typeof filter === 'string')\r\n        return [filter];\r\n    // Filter is either an array of strings, or an array of array of strings\r\n    return filter;\r\n}\r\n/**\r\n * Merge facetFilters, numericFilters and filters together.\r\n *\r\n * @param  {Filter} facetFilters\r\n * @param  {Filter} numericFilters\r\n * @param  {string} filters\r\n * @returns {Filter}\r\n */\r\nfunction mergeFilters(facetFilters, numericFilters, filters) {\r\n    var adaptedFilters = filters.trim();\r\n    var adaptedFacetFilters = filterToArray(facetFilters);\r\n    var adaptedNumericFilters = filterToArray(numericFilters);\r\n    var adaptedFilter = __spreadArray(__spreadArray(__spreadArray([], adaptedFacetFilters, true), adaptedNumericFilters, true), [\r\n        adaptedFilters,\r\n    ]);\r\n    var cleanedFilters = adaptedFilter.filter(function (filter) {\r\n        if (Array.isArray(filter)) {\r\n            return filter.length;\r\n        }\r\n        return filter;\r\n    });\r\n    return cleanedFilters;\r\n}\r\n/**\r\n * Adapt instantsearch.js filters to Meilisearch filters by\r\n * combining and transforming all provided filters.\r\n *\r\n * @param  {string|undefined} filters\r\n * @param  {SearchContext['numericFilters']} numericFilters\r\n * @param  {SearchContext['facetFilters']} facetFilters\r\n * @returns {Filter}\r\n */\r\nfunction adaptFilters(filters, numericFilters, facetFilters) {\r\n    var transformedFilter = transformFilter(facetFilters || []);\r\n    var transformedNumericFilter = transformFilter(numericFilters || []);\r\n    return mergeFilters(transformedFilter, transformedNumericFilter, filters || '');\r\n}\n\n/**\r\n * Adapt search request from instantsearch.js\r\n * to search request compliant with Meilisearch\r\n *\r\n * @param  {SearchContext} searchContext\r\n * @returns {MeiliSearchParams}\r\n */\r\nfunction adaptSearchParams(searchContext) {\r\n    // Creates search params object compliant with Meilisearch\r\n    var meiliSearchParams = {};\r\n    // Facets\r\n    var facets = searchContext === null || searchContext === void 0 ? void 0 : searchContext.facets;\r\n    if (facets === null || facets === void 0 ? void 0 : facets.length) {\r\n        meiliSearchParams.facetsDistribution = facets;\r\n    }\r\n    // Attributes To Crop\r\n    var attributesToCrop = searchContext === null || searchContext === void 0 ? void 0 : searchContext.attributesToSnippet;\r\n    if (attributesToCrop) {\r\n        meiliSearchParams.attributesToCrop = attributesToCrop;\r\n    }\r\n    // Attributes To Crop marker\r\n    var cropMarker = searchContext === null || searchContext === void 0 ? void 0 : searchContext.snippetEllipsisText;\r\n    if (cropMarker != null) {\r\n        meiliSearchParams.cropMarker = cropMarker;\r\n    }\r\n    // Attributes To Retrieve\r\n    var attributesToRetrieve = searchContext === null || searchContext === void 0 ? void 0 : searchContext.attributesToRetrieve;\r\n    if (attributesToRetrieve) {\r\n        meiliSearchParams.attributesToRetrieve = attributesToRetrieve;\r\n    }\r\n    // Filter\r\n    var filter = adaptFilters(searchContext === null || searchContext === void 0 ? void 0 : searchContext.filters, searchContext === null || searchContext === void 0 ? void 0 : searchContext.numericFilters, searchContext === null || searchContext === void 0 ? void 0 : searchContext.facetFilters);\r\n    if (filter.length) {\r\n        meiliSearchParams.filter = filter;\r\n    }\r\n    // Attributes To Retrieve\r\n    if (attributesToRetrieve) {\r\n        meiliSearchParams.attributesToCrop = attributesToRetrieve;\r\n    }\r\n    // Attributes To Highlight\r\n    meiliSearchParams.attributesToHighlight = (searchContext === null || searchContext === void 0 ? void 0 : searchContext.attributesToHighlight) || [\r\n        '*',\r\n    ];\r\n    // Highlight pre tag\r\n    var highlightPreTag = searchContext === null || searchContext === void 0 ? void 0 : searchContext.highlightPreTag;\r\n    if (highlightPreTag) {\r\n        meiliSearchParams.highlightPreTag = highlightPreTag;\r\n    }\r\n    else {\r\n        meiliSearchParams.highlightPreTag = '__ais-highlight__';\r\n    }\r\n    // Highlight post tag\r\n    var highlightPostTag = searchContext === null || searchContext === void 0 ? void 0 : searchContext.highlightPostTag;\r\n    if (highlightPostTag) {\r\n        meiliSearchParams.highlightPostTag = highlightPostTag;\r\n    }\r\n    else {\r\n        meiliSearchParams.highlightPostTag = '__/ais-highlight__';\r\n    }\r\n    var placeholderSearch = searchContext.placeholderSearch;\r\n    var query = searchContext.query;\r\n    // Pagination\r\n    var pagination = searchContext.pagination;\r\n    // Limit based on pagination preferences\r\n    if ((!placeholderSearch && query === '') ||\r\n        pagination.paginationTotalHits === 0) {\r\n        meiliSearchParams.limit = 0;\r\n    }\r\n    else if (searchContext.finitePagination) {\r\n        meiliSearchParams.limit = pagination.paginationTotalHits;\r\n    }\r\n    else {\r\n        var limit = (pagination.page + 1) * pagination.hitsPerPage + 1;\r\n        // If the limit is bigger than the total hits accepted\r\n        // force the limit to that amount\r\n        if (limit > pagination.paginationTotalHits) {\r\n            meiliSearchParams.limit = pagination.paginationTotalHits;\r\n        }\r\n        else {\r\n            meiliSearchParams.limit = limit;\r\n        }\r\n    }\r\n    var sort = searchContext.sort;\r\n    // Sort\r\n    if (sort === null || sort === void 0 ? void 0 : sort.length) {\r\n        meiliSearchParams.sort = [sort];\r\n    }\r\n    var geoSearchContext = createGeoSearchContext(searchContext);\r\n    var geoRules = adaptGeoPointsRules(geoSearchContext);\r\n    if (geoRules === null || geoRules === void 0 ? void 0 : geoRules.filter) {\r\n        if (meiliSearchParams.filter) {\r\n            meiliSearchParams.filter.unshift(geoRules.filter);\r\n        }\r\n        else {\r\n            meiliSearchParams.filter = [geoRules.filter];\r\n        }\r\n    }\r\n    return meiliSearchParams;\r\n}\n\n/**\r\n * Slice the requested hits based on the pagination position.\r\n *\r\n * @param  {Record<string} hits\r\n * @param  {number} page\r\n * @param  {number} hitsPerPage\r\n * @returns {Array}\r\n */\r\nfunction adaptPagination(hits, page, hitsPerPage) {\r\n    if (hitsPerPage < 0) {\r\n        throw new TypeError('Value too small for \"hitsPerPage\" parameter, expected integer between 0 and 9223372036854775807');\r\n    }\r\n    var start = page * hitsPerPage;\r\n    return hits.slice(start, start + hitsPerPage);\r\n}\n\n/**\r\n * Stringify values following instantsearch practices.\r\n *\r\n * @param  {any} value - value that needs to be stringified\r\n */\r\nfunction stringifyValue(value) {\r\n    if (typeof value === 'string') {\r\n        // String\r\n        return value;\r\n    }\r\n    else if (value === undefined) {\r\n        // undefined\r\n        return JSON.stringify(null);\r\n    }\r\n    else {\r\n        return JSON.stringify(value);\r\n    }\r\n}\r\n/**\r\n * Recursif function wrap the deepest possible value\r\n * the following way: { value: \"xx\" }.\r\n *\r\n * For example:\r\n *\r\n * {\r\n * \"rootField\": { \"value\": \"x\" }\r\n * \"nestedField\": { child: { value: \"y\" } }\r\n * }\r\n *\r\n * recursivity continues until the value is not an array or an object.\r\n *\r\n * @param  {any} value - value of a field\r\n *\r\n * @returns Record<string, any>\r\n */\r\nfunction wrapValue(value) {\r\n    if (Array.isArray(value)) {\r\n        // Array\r\n        return value.map(function (elem) { return wrapValue(elem); });\r\n    }\r\n    else if (isPureObject(value)) {\r\n        // Object\r\n        return Object.keys(value).reduce(function (nested, key) {\r\n            nested[key] = wrapValue(value[key]);\r\n            return nested;\r\n        }, {});\r\n    }\r\n    else {\r\n        return { value: stringifyValue(value) };\r\n    }\r\n}\r\n/**\r\n * Adapt Meilisearch formatted fields to a format compliant to instantsearch.js.\r\n *\r\n * @param  {Record<string} formattedHit\r\n * @param  {SearchContext} searchContext\r\n * @returns {Record}\r\n */\r\nfunction adaptFormattedFields(hit) {\r\n    if (!hit)\r\n        return {};\r\n    var _formattedResult = wrapValue(hit);\r\n    var highlightedHit = {\r\n        // We could not determine what the differences are between those two fields.\r\n        _highlightResult: _formattedResult,\r\n        _snippetResult: _formattedResult\r\n    };\r\n    return highlightedHit;\r\n}\n\n/**\r\n * @param  {any[]} hits\r\n * @returns {Array<Record<string, any>>}\r\n */\r\nfunction adaptGeoResponse(hits) {\r\n    for (var i = 0; i < hits.length; i++) {\r\n        if (hits[i]._geo) {\r\n            hits[i]._geoloc = {\r\n                lat: hits[i]._geo.lat,\r\n                lng: hits[i]._geo.lng\r\n            };\r\n            hits[i].objectID = \"\".concat(i + Math.random() * 1000000);\r\n            delete hits[i]._geo;\r\n        }\r\n    }\r\n    return hits;\r\n}\n\n/**\r\n * @param  {Array<Record<string} hits\r\n * @param  {SearchContext} searchContext\r\n * @param  {PaginationContext} paginationContext\r\n * @returns {any}\r\n */\r\nfunction adaptHits(hits, searchContext, paginationContext) {\r\n    var primaryKey = searchContext.primaryKey;\r\n    var hitsPerPage = paginationContext.hitsPerPage, page = paginationContext.page;\r\n    var paginatedHits = adaptPagination(hits, page, hitsPerPage);\r\n    var adaptedHits = paginatedHits.map(function (hit) {\r\n        // Creates Hit object compliant with InstantSearch\r\n        if (Object.keys(hit).length > 0) {\r\n            var formattedHit = hit._formatted; hit._matchesInfo; var documentFields = __rest(hit, [\"_formatted\", \"_matchesInfo\"]);\r\n            var adaptedHit = Object.assign(documentFields, adaptFormattedFields(formattedHit));\r\n            if (primaryKey) {\r\n                adaptedHit.objectID = hit[primaryKey];\r\n            }\r\n            return adaptedHit;\r\n        }\r\n        return hit;\r\n    });\r\n    adaptedHits = adaptGeoResponse(adaptedHits);\r\n    return adaptedHits;\r\n}\n\n/**\r\n * Adapt search response from Meilisearch\r\n * to search response compliant with instantsearch.js\r\n *\r\n * @param  {MeiliSearchResponse<Record<string} searchResponse\r\n * @param  {SearchContext} searchContext\r\n * @param  {PaginationContext} paginationContext\r\n * @returns {{ results: Array<AlgoliaSearchResponse<T>> }}\r\n */\r\nfunction adaptSearchResponse(searchResponse, searchContext) {\r\n    var searchResponseOptionals = {};\r\n    var facets = searchResponse.facetsDistribution;\r\n    var pagination = searchContext.pagination;\r\n    var exhaustiveFacetsCount = searchResponse === null || searchResponse === void 0 ? void 0 : searchResponse.exhaustiveFacetsCount;\r\n    if (exhaustiveFacetsCount) {\r\n        searchResponseOptionals.exhaustiveFacetsCount = exhaustiveFacetsCount;\r\n    }\r\n    var nbPages = ceiledDivision(searchResponse.hits.length, pagination.hitsPerPage);\r\n    var hits = adaptHits(searchResponse.hits, searchContext, pagination);\r\n    var exhaustiveNbHits = searchResponse.exhaustiveNbHits;\r\n    var nbHits = searchResponse.nbHits;\r\n    var processingTimeMs = searchResponse.processingTimeMs;\r\n    var query = searchResponse.query;\r\n    var hitsPerPage = pagination.hitsPerPage, page = pagination.page;\r\n    // Create response object compliant with InstantSearch\r\n    var adaptedSearchResponse = __assign({ index: searchContext.indexUid, hitsPerPage: hitsPerPage, page: page, facets: facets, nbPages: nbPages, exhaustiveNbHits: exhaustiveNbHits, nbHits: nbHits, processingTimeMS: processingTimeMs, query: query, hits: hits, params: '' }, searchResponseOptionals);\r\n    return {\r\n        results: [adaptedSearchResponse]\r\n    };\r\n}\n\n/**\r\n * @param  {AlgoliaMultipleQueriesQuery} searchRequest\r\n * @param  {Context} options\r\n * @returns {SearchContext}\r\n */\r\nfunction createPaginationContext(_a) {\r\n    var paginationTotalHits = _a.paginationTotalHits, hitsPerPage = _a.hitsPerPage, page = _a.page;\r\n    return {\r\n        paginationTotalHits: paginationTotalHits != null ? paginationTotalHits : 200,\r\n        hitsPerPage: hitsPerPage === undefined ? 20 : hitsPerPage,\r\n        page: page || 0\r\n    };\r\n}\n\n/**\r\n * @param  {AlgoliaMultipleQueriesQuery} searchRequest\r\n * @param  {Context} options\r\n * @returns {SearchContext}\r\n */\r\nfunction createSearchContext(searchRequest, options, defaultFacetDistribution) {\r\n    // Split index name and possible sorting rules\r\n    var _a = searchRequest.indexName.split(':'), indexUid = _a[0], sortByArray = _a.slice(1);\r\n    var instantSearchParams = searchRequest.params;\r\n    var pagination = createPaginationContext({\r\n        paginationTotalHits: options.paginationTotalHits,\r\n        hitsPerPage: instantSearchParams === null || instantSearchParams === void 0 ? void 0 : instantSearchParams.hitsPerPage,\r\n        page: instantSearchParams === null || instantSearchParams === void 0 ? void 0 : instantSearchParams.page\r\n    });\r\n    var searchContext = __assign(__assign(__assign({}, options), instantSearchParams), { sort: sortByArray.join(':') || '', indexUid: indexUid, pagination: pagination, defaultFacetDistribution: defaultFacetDistribution, placeholderSearch: options.placeholderSearch !== false, keepZeroFacets: !!options.keepZeroFacets, finitePagination: !!options.finitePagination });\r\n    return searchContext;\r\n}\n\n/**\r\n * @param  {Record<string} cache\r\n * @returns {SearchCache}\r\n */\r\nfunction SearchCache(cache) {\r\n    if (cache === void 0) { cache = {}; }\r\n    var searchCache = cache;\r\n    return {\r\n        getEntry: function (key) {\r\n            if (searchCache[key]) {\r\n                try {\r\n                    return JSON.parse(searchCache[key]);\r\n                }\r\n                catch (_) {\r\n                    return searchCache[key];\r\n                }\r\n            }\r\n            return undefined;\r\n        },\r\n        formatKey: function (components) {\r\n            return stringifyArray(components);\r\n        },\r\n        setEntry: function (key, searchResponse) {\r\n            searchCache[key] = JSON.stringify(searchResponse);\r\n        }\r\n    };\r\n}\n\nfunction cacheFirstFacetsDistribution(defaultFacetDistribution, searchResponse) {\r\n    if (searchResponse.query === '' &&\r\n        Object.keys(defaultFacetDistribution).length === 0) {\r\n        return searchResponse.facetsDistribution;\r\n    }\r\n    return defaultFacetDistribution;\r\n}\n\n/**\r\n * Instanciate SearchClient required by instantsearch.js.\r\n *\r\n * @param  {string} hostUrl\r\n * @param  {string} apiKey\r\n * @param  {InstantMeiliSearchOptions={}} meiliSearchOptions\r\n * @returns {InstantMeiliSearchInstance}\r\n */\r\nfunction instantMeiliSearch(hostUrl, apiKey, instantMeiliSearchOptions) {\r\n    if (apiKey === void 0) { apiKey = ''; }\r\n    if (instantMeiliSearchOptions === void 0) { instantMeiliSearchOptions = {}; }\r\n    // create search resolver with included cache\r\n    var searchResolver = SearchResolver(SearchCache());\r\n    // paginationTotalHits can be 0 as it is a valid number\r\n    var defaultFacetDistribution = {};\r\n    var meilisearchClient = new meilisearch__WEBPACK_IMPORTED_MODULE_0__.MeiliSearch({ host: hostUrl, apiKey: apiKey });\r\n    return {\r\n        /**\r\n         * @param  {readonlyAlgoliaMultipleQueriesQuery[]} instantSearchRequests\r\n         * @returns {Array}\r\n         */\r\n        search: function (instantSearchRequests) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var searchRequest, searchContext, adaptedSearchRequest, searchResponse, adaptedSearchResponse, e_1;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0:\r\n                            _a.trys.push([0, 2, , 3]);\r\n                            searchRequest = instantSearchRequests[0];\r\n                            searchContext = createSearchContext(searchRequest, instantMeiliSearchOptions, defaultFacetDistribution);\r\n                            adaptedSearchRequest = adaptSearchParams(searchContext);\r\n                            return [4 /*yield*/, searchResolver.searchResponse(searchContext, adaptedSearchRequest, meilisearchClient)\r\n                                // Cache first facets distribution of the instantMeilisearch instance\r\n                                // Needed to add in the facetsDistribution the fields that were not returned\r\n                                // When the user sets `keepZeroFacets` to true.\r\n                            ];\r\n                        case 1:\r\n                            searchResponse = _a.sent();\r\n                            // Cache first facets distribution of the instantMeilisearch instance\r\n                            // Needed to add in the facetsDistribution the fields that were not returned\r\n                            // When the user sets `keepZeroFacets` to true.\r\n                            defaultFacetDistribution = cacheFirstFacetsDistribution(defaultFacetDistribution, searchResponse);\r\n                            adaptedSearchResponse = adaptSearchResponse(searchResponse, searchContext);\r\n                            return [2 /*return*/, adaptedSearchResponse];\r\n                        case 2:\r\n                            e_1 = _a.sent();\r\n                            console.error(e_1);\r\n                            throw new Error(e_1);\r\n                        case 3: return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        },\r\n        searchForFacetValues: function (_) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, new Promise(function (resolve, reject) {\r\n                                reject(new Error('SearchForFacetValues is not compatible with Meilisearch'));\r\n                                resolve([]); // added here to avoid compilation error\r\n                            })];\r\n                        case 1: return [2 /*return*/, _a.sent()];\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@meilisearch/instant-meilisearch/dist/instant-meilisearch.esm.js\n");

/***/ })

};
;