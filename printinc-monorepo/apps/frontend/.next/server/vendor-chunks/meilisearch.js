"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/meilisearch";
exports.ids = ["vendor-chunks/meilisearch"];
exports.modules = {

/***/ "(ssr)/./node_modules/meilisearch/dist/bundles/meilisearch.cjs.js":
/*!******************************************************************!*\
  !*** ./node_modules/meilisearch/dist/bundles/meilisearch.cjs.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\n__webpack_require__(/*! cross-fetch/polyfill */ \"(ssr)/./node_modules/cross-fetch/dist/node-polyfill.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar crypto__default = /*#__PURE__*/_interopDefaultLegacy(crypto);\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\n\nvar MeiliSearchCommunicationError = /** @class */ (function (_super) {\r\n    __extends(MeiliSearchCommunicationError, _super);\r\n    function MeiliSearchCommunicationError(message, body, url, stack) {\r\n        var _this = this;\r\n        var _a, _b, _c;\r\n        _this = _super.call(this, message) || this;\r\n        _this.name = 'MeiliSearchCommunicationError';\r\n        _this.type = 'MeiliSearchCommunicationError';\r\n        if (body instanceof Response) {\r\n            _this.message = body.statusText;\r\n            _this.statusCode = body.status;\r\n        }\r\n        if (body instanceof Error) {\r\n            _this.errno = body.errno;\r\n            _this.code = body.code;\r\n        }\r\n        if (stack) {\r\n            _this.stack = stack;\r\n            _this.stack = (_a = _this.stack) === null || _a === void 0 ? void 0 : _a.replace(/(TypeError|FetchError)/, _this.name);\r\n            _this.stack = (_b = _this.stack) === null || _b === void 0 ? void 0 : _b.replace('Failed to fetch', \"request to \".concat(url, \" failed, reason: connect ECONNREFUSED\"));\r\n            _this.stack = (_c = _this.stack) === null || _c === void 0 ? void 0 : _c.replace('Not Found', \"Not Found: \".concat(url));\r\n        }\r\n        else {\r\n            if (Error.captureStackTrace) {\r\n                Error.captureStackTrace(_this, MeiliSearchCommunicationError);\r\n            }\r\n        }\r\n        return _this;\r\n    }\r\n    return MeiliSearchCommunicationError;\r\n}(Error));\n\nvar MeiliSearchApiError = /** @class */ (function (_super) {\r\n    __extends(class_1, _super);\r\n    function class_1(error, status) {\r\n        var _this = _super.call(this, error.message) || this;\r\n        _this.name = 'MeiliSearchApiError';\r\n        _this.code = error.code;\r\n        _this.type = error.type;\r\n        _this.link = error.link;\r\n        _this.message = error.message;\r\n        _this.httpStatus = status;\r\n        // Make errors comparison possible. ex: error instanceof MeiliSearchApiError.\r\n        Object.setPrototypeOf(_this, MeiliSearchApiError.prototype);\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(_this, MeiliSearchApiError);\r\n        }\r\n        return _this;\r\n    }\r\n    return class_1;\r\n}(Error));\n\nfunction httpResponseErrorHandler(response) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var err;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!!response.ok) return [3 /*break*/, 5];\r\n                    err = void 0;\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, 3, , 4]);\r\n                    return [4 /*yield*/, response.json()];\r\n                case 2:\r\n                    err = _a.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    _a.sent();\r\n                    throw new MeiliSearchCommunicationError(response.statusText, response, response.url);\r\n                case 4: throw new MeiliSearchApiError(err, response.status);\r\n                case 5: return [2 /*return*/, response];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction httpErrorHandler(response, stack, url) {\r\n    if (response.type !== 'MeiliSearchApiError') {\r\n        throw new MeiliSearchCommunicationError(response.message, response, url, stack);\r\n    }\r\n    throw response;\r\n}\n\nvar MeiliSearchError = /** @class */ (function (_super) {\r\n    __extends(MeiliSearchError, _super);\r\n    function MeiliSearchError(message) {\r\n        var _this = _super.call(this, message) || this;\r\n        _this.name = 'MeiliSearchError';\r\n        _this.type = 'MeiliSearchError';\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(_this, MeiliSearchError);\r\n        }\r\n        return _this;\r\n    }\r\n    return MeiliSearchError;\r\n}(Error));\n\nvar MeiliSearchTimeOutError = /** @class */ (function (_super) {\r\n    __extends(MeiliSearchTimeOutError, _super);\r\n    function MeiliSearchTimeOutError(message) {\r\n        var _this = _super.call(this, message) || this;\r\n        _this.name = 'MeiliSearchTimeOutError';\r\n        _this.type = _this.constructor.name;\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(_this, MeiliSearchTimeOutError);\r\n        }\r\n        return _this;\r\n    }\r\n    return MeiliSearchTimeOutError;\r\n}(Error));\n\n/**\r\n * Removes undefined entries from object\r\n */\r\nfunction removeUndefinedFromObject(obj) {\r\n    return Object.entries(obj).reduce(function (acc, curEntry) {\r\n        var key = curEntry[0], val = curEntry[1];\r\n        if (val !== undefined)\r\n            acc[key] = val;\r\n        return acc;\r\n    }, {});\r\n}\r\nfunction sleep(ms) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, ms); })];\r\n                case 1: return [2 /*return*/, _a.sent()];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction addProtocolIfNotPresent(host) {\r\n    if (!(host.startsWith('https://') || host.startsWith('http://'))) {\r\n        return \"http://\".concat(host);\r\n    }\r\n    return host;\r\n}\r\nfunction addTrailingSlash(url) {\r\n    if (!url.endsWith('/')) {\r\n        url += '/';\r\n    }\r\n    return url;\r\n}\n\nfunction constructHostURL(host) {\r\n    try {\r\n        host = addProtocolIfNotPresent(host);\r\n        host = addTrailingSlash(host);\r\n        return host;\r\n    }\r\n    catch (e) {\r\n        throw new MeiliSearchError('The provided host is not valid.');\r\n    }\r\n}\r\nvar HttpRequests = /** @class */ (function () {\r\n    function HttpRequests(config) {\r\n        this.headers = Object.assign({}, config.headers || {}); // assign to avoid referencing\r\n        this.headers['Content-Type'] = 'application/json';\r\n        if (config.apiKey) {\r\n            this.headers['Authorization'] = \"Bearer \".concat(config.apiKey);\r\n        }\r\n        try {\r\n            var host = constructHostURL(config.host);\r\n            this.url = new URL(host);\r\n        }\r\n        catch (e) {\r\n            throw new MeiliSearchError('The provided host is not valid.');\r\n        }\r\n    }\r\n    HttpRequests.prototype.request = function (_a) {\r\n        var method = _a.method, url = _a.url, params = _a.params, body = _a.body, config = _a.config;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var constructURL, queryParams_1, response, parsedBody, parsedJson, e_1, stack;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        constructURL = new URL(url, this.url);\r\n                        if (params) {\r\n                            queryParams_1 = new URLSearchParams();\r\n                            Object.keys(params)\r\n                                .filter(function (x) { return params[x] !== null; })\r\n                                .map(function (x) { return queryParams_1.set(x, params[x]); });\r\n                            constructURL.search = queryParams_1.toString();\r\n                        }\r\n                        _b.label = 1;\r\n                    case 1:\r\n                        _b.trys.push([1, 4, , 5]);\r\n                        return [4 /*yield*/, fetch(constructURL.toString(), __assign(__assign({}, config), { method: method, body: JSON.stringify(body), headers: this.headers })).then(function (res) { return httpResponseErrorHandler(res); })];\r\n                    case 2:\r\n                        response = _b.sent();\r\n                        return [4 /*yield*/, response.text()];\r\n                    case 3:\r\n                        parsedBody = _b.sent();\r\n                        try {\r\n                            parsedJson = JSON.parse(parsedBody);\r\n                            return [2 /*return*/, parsedJson];\r\n                        }\r\n                        catch (_) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        e_1 = _b.sent();\r\n                        stack = e_1.stack;\r\n                        httpErrorHandler(e_1, stack, constructURL.toString());\r\n                        return [3 /*break*/, 5];\r\n                    case 5: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    HttpRequests.prototype.get = function (url, params, config) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.request({\r\n                            method: 'GET',\r\n                            url: url,\r\n                            params: params,\r\n                            config: config\r\n                        })];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    HttpRequests.prototype.post = function (url, data, params, config) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.request({\r\n                            method: 'POST',\r\n                            url: url,\r\n                            body: data,\r\n                            params: params,\r\n                            config: config\r\n                        })];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    HttpRequests.prototype.put = function (url, data, params, config) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.request({\r\n                            method: 'PUT',\r\n                            url: url,\r\n                            body: data,\r\n                            params: params,\r\n                            config: config\r\n                        })];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    HttpRequests.prototype.patch = function (url, data, params, config) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.request({\r\n                            method: 'PATCH',\r\n                            url: url,\r\n                            body: data,\r\n                            params: params,\r\n                            config: config\r\n                        })];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    HttpRequests.prototype[\"delete\"] = function (url, data, params, config) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.request({\r\n                            method: 'DELETE',\r\n                            url: url,\r\n                            body: data,\r\n                            params: params,\r\n                            config: config\r\n                        })];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return HttpRequests;\r\n}());\n\nvar TaskClient = /** @class */ (function () {\r\n    function TaskClient(config) {\r\n        this.httpRequest = new HttpRequests(config);\r\n    }\r\n    TaskClient.prototype.getClientTask = function (uid) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"tasks/\".concat(uid);\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TaskClient.prototype.getClientTasks = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"tasks\";\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TaskClient.prototype.getIndexTask = function (indexUid, taskId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(indexUid, \"/tasks/\").concat(taskId);\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TaskClient.prototype.getIndexTasks = function (indexUid) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(indexUid, \"/tasks\");\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Wait for a task to be processed.\r\n     *\r\n     * @param {number} uid Task identifier\r\n     * @param {WaitOptions} options Additional configuration options\r\n     * @returns {Promise<Task>} Promise returning a task after it has been processed\r\n     */\r\n    TaskClient.prototype.waitForClientTask = function (taskId, _a) {\r\n        var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5000 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var startingTime, response;\r\n            return __generator(this, function (_e) {\r\n                switch (_e.label) {\r\n                    case 0:\r\n                        startingTime = Date.now();\r\n                        _e.label = 1;\r\n                    case 1:\r\n                        if (!(Date.now() - startingTime < timeOutMs)) return [3 /*break*/, 4];\r\n                        return [4 /*yield*/, this.getClientTask(taskId)];\r\n                    case 2:\r\n                        response = _e.sent();\r\n                        if (![\"enqueued\" /* TASK_ENQUEUED */, \"processing\" /* TASK_PROCESSING */].includes(response.status))\r\n                            return [2 /*return*/, response];\r\n                        return [4 /*yield*/, sleep(intervalMs)];\r\n                    case 3:\r\n                        _e.sent();\r\n                        return [3 /*break*/, 1];\r\n                    case 4: throw new MeiliSearchTimeOutError(\"timeout of \".concat(timeOutMs, \"ms has exceeded on process \").concat(taskId, \" when waiting a task to be resolved.\"));\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Waits for multiple tasks to be processed\r\n     *\r\n     * @param {number} taskIds Tasks identifier list\r\n     * @param {WaitOptions} options Wait options\r\n     * @returns {Promise<Result<Task[]>>} Promise returning a list of tasks after they have been processed\r\n     */\r\n    TaskClient.prototype.waitForClientTasks = function (taskIds, _a) {\r\n        var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5000 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var tasks, _i, taskIds_1, taskId, task;\r\n            return __generator(this, function (_e) {\r\n                switch (_e.label) {\r\n                    case 0:\r\n                        tasks = [];\r\n                        _i = 0, taskIds_1 = taskIds;\r\n                        _e.label = 1;\r\n                    case 1:\r\n                        if (!(_i < taskIds_1.length)) return [3 /*break*/, 4];\r\n                        taskId = taskIds_1[_i];\r\n                        return [4 /*yield*/, this.waitForClientTask(taskId, {\r\n                                timeOutMs: timeOutMs,\r\n                                intervalMs: intervalMs\r\n                            })];\r\n                    case 2:\r\n                        task = _e.sent();\r\n                        tasks.push(task);\r\n                        _e.label = 3;\r\n                    case 3:\r\n                        _i++;\r\n                        return [3 /*break*/, 1];\r\n                    case 4: return [2 /*return*/, { results: tasks }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Waits for a task to be processed\r\n     *\r\n     * @param {number} taskId Task identifier\r\n     * @param {WaitOptions} options Wait options\r\n     * @returns {Promise<Task>} Promise returning a task after it has been processed\r\n     */\r\n    TaskClient.prototype.waitForIndexTask = function (indexUid, taskId, _a) {\r\n        var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5000 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var startingTime, response;\r\n            return __generator(this, function (_e) {\r\n                switch (_e.label) {\r\n                    case 0:\r\n                        startingTime = Date.now();\r\n                        _e.label = 1;\r\n                    case 1:\r\n                        if (!(Date.now() - startingTime < timeOutMs)) return [3 /*break*/, 4];\r\n                        return [4 /*yield*/, this.getIndexTask(indexUid, taskId)];\r\n                    case 2:\r\n                        response = _e.sent();\r\n                        if (![\"enqueued\" /* TASK_ENQUEUED */, \"processing\" /* TASK_PROCESSING */].includes(response.status))\r\n                            return [2 /*return*/, response];\r\n                        return [4 /*yield*/, sleep(intervalMs)];\r\n                    case 3:\r\n                        _e.sent();\r\n                        return [3 /*break*/, 1];\r\n                    case 4: throw new MeiliSearchTimeOutError(\"timeout of \".concat(timeOutMs, \"ms has exceeded on process \").concat(taskId, \" when waiting for pending update to resolve.\"));\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return TaskClient;\r\n}());\n\n/*\r\n * Bundle: MeiliSearch / Indexes\r\n * Project: MeiliSearch - Javascript API\r\n * Author: Quentin de Quelen <quentin@meilisearch.com>\r\n * Copyright: 2019, MeiliSearch\r\n */\r\nvar Index = /** @class */ (function () {\r\n    /**\r\n     * @param {Config} config Request configuration options\r\n     * @param {string} uid UID of the index\r\n     * @param {string} primaryKey? Primary Key of the index\r\n     */\r\n    function Index(config, uid, primaryKey) {\r\n        this.uid = uid;\r\n        this.primaryKey = primaryKey;\r\n        this.httpRequest = new HttpRequests(config);\r\n        this.tasks = new TaskClient(config);\r\n    }\r\n    ///\r\n    /// SEARCH\r\n    ///\r\n    /**\r\n     * Search for documents into an index\r\n     * @memberof Index\r\n     * @method search\r\n     * @template T\r\n     * @param {string | null} query? Query string\r\n     * @param {SearchParams} options? Search options\r\n     * @param {Partial<Request>} config? Additional request configuration options\r\n     * @returns {Promise<SearchResponse<T>>} Promise containing the search response\r\n     */\r\n    Index.prototype.search = function (query, options, config) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/search\");\r\n                        return [4 /*yield*/, this.httpRequest.post(url, removeUndefinedFromObject(__assign(__assign({}, options), { q: query })), undefined, config)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Search for documents into an index using the GET method\r\n     * @memberof Index\r\n     * @method search\r\n     * @template T\r\n     * @param {string | null} query? Query string\r\n     * @param {SearchParams} options? Search options\r\n     * @param {Partial<Request>} config? Additional request configuration options\r\n     * @returns {Promise<SearchResponse<T>>} Promise containing the search response\r\n     */\r\n    Index.prototype.searchGet = function (query, options, config) {\r\n        var _a, _b, _c, _d, _e;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url, parseFilter, getParams;\r\n            return __generator(this, function (_f) {\r\n                switch (_f.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/search\");\r\n                        parseFilter = function (filter) {\r\n                            if (typeof filter === 'string')\r\n                                return filter;\r\n                            else if (Array.isArray(filter))\r\n                                throw new MeiliSearchError('The filter query parameter should be in string format when using searchGet');\r\n                            else\r\n                                return undefined;\r\n                        };\r\n                        getParams = __assign(__assign({ q: query }, options), { filter: parseFilter(options === null || options === void 0 ? void 0 : options.filter), sort: (_a = options === null || options === void 0 ? void 0 : options.sort) === null || _a === void 0 ? void 0 : _a.join(','), facetsDistribution: (_b = options === null || options === void 0 ? void 0 : options.facetsDistribution) === null || _b === void 0 ? void 0 : _b.join(','), attributesToRetrieve: (_c = options === null || options === void 0 ? void 0 : options.attributesToRetrieve) === null || _c === void 0 ? void 0 : _c.join(','), attributesToCrop: (_d = options === null || options === void 0 ? void 0 : options.attributesToCrop) === null || _d === void 0 ? void 0 : _d.join(','), attributesToHighlight: (_e = options === null || options === void 0 ? void 0 : options.attributesToHighlight) === null || _e === void 0 ? void 0 : _e.join(',') });\r\n                        return [4 /*yield*/, this.httpRequest.get(url, removeUndefinedFromObject(getParams), config)];\r\n                    case 1: return [2 /*return*/, _f.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ///\r\n    /// INDEX\r\n    ///\r\n    /**\r\n     * Get index information.\r\n     * @memberof Index\r\n     * @method getRawInfo\r\n     * @returns {Promise<IndexResponse>} Promise containing index information\r\n     */\r\n    Index.prototype.getRawInfo = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url, res;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid);\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1:\r\n                        res = _a.sent();\r\n                        this.primaryKey = res.primaryKey;\r\n                        return [2 /*return*/, res];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Fetch and update Index information.\r\n     * @memberof Index\r\n     * @method fetchInfo\r\n     * @returns {Promise<this>} Promise to the current Index object with updated information\r\n     */\r\n    Index.prototype.fetchInfo = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getRawInfo()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/, this];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get Primary Key.\r\n     * @memberof Index\r\n     * @method fetchPrimaryKey\r\n     * @returns {Promise<string | undefined>} Promise containing the Primary Key of the index\r\n     */\r\n    Index.prototype.fetchPrimaryKey = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _a = this;\r\n                        return [4 /*yield*/, this.getRawInfo()];\r\n                    case 1:\r\n                        _a.primaryKey = (_b.sent()).primaryKey;\r\n                        return [2 /*return*/, this.primaryKey];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Create an index.\r\n     * @memberof Index\r\n     * @method create\r\n     * @template T\r\n     * @param {string} uid Unique identifier of the Index\r\n     * @param {IndexOptions} options Index options\r\n     * @param {Config} config Request configuration options\r\n     * @returns {Promise<Index<T>>} Newly created Index object\r\n     */\r\n    Index.create = function (uid, options, config) {\r\n        if (options === void 0) { options = {}; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url, req;\r\n            return __generator(this, function (_a) {\r\n                url = \"indexes\";\r\n                req = new HttpRequests(config);\r\n                return [2 /*return*/, req.post(url, __assign(__assign({}, options), { uid: uid }))];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update an index.\r\n     * @memberof Index\r\n     * @method update\r\n     * @param {IndexOptions} data Data to update\r\n     * @returns {Promise<this>} Promise to the current Index object with updated information\r\n     */\r\n    Index.prototype.update = function (data) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid);\r\n                        return [4 /*yield*/, this.httpRequest.put(url, data)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Delete an index.\r\n     * @memberof Index\r\n     * @method delete\r\n     * @returns {Promise<void>} Promise which resolves when index is deleted successfully\r\n     */\r\n    Index.prototype[\"delete\"] = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid);\r\n                        return [4 /*yield*/, this.httpRequest[\"delete\"](url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ///\r\n    /// TASKS\r\n    ///\r\n    /**\r\n     * Get the list of all the index tasks.\r\n     *\r\n     * @memberof Indexes\r\n     * @method getTasks\r\n     *\r\n     * @returns {Promise<Result<Task[]>>} - Promise containing all tasks\r\n     */\r\n    Index.prototype.getTasks = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.tasks.getIndexTasks(this.uid)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get one task of the index.\r\n     *\r\n     * @memberof Indexes\r\n     * @method getTask\r\n     * @param {number} taskId - Task identifier\r\n     *\r\n     * @returns {Promise<Task>} - Promise containing a task\r\n     */\r\n    Index.prototype.getTask = function (taskId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.tasks.getIndexTask(this.uid, taskId)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Wait for a batch of an index tasks to be processed.\r\n     *\r\n     * @memberof Indexes\r\n     * @method waitForTasks\r\n     * @param {number[]} taskIds - Tasks identifier\r\n     * @param {WaitOptions} waitOptions - Options on timeout and interval\r\n     *\r\n     * @returns {Promise<Result<Task[]>>} - Promise containing an array of tasks\r\n     */\r\n    Index.prototype.waitForTasks = function (taskIds, _a) {\r\n        var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5000 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_e) {\r\n                switch (_e.label) {\r\n                    case 0: return [4 /*yield*/, this.tasks.waitForClientTasks(taskIds, {\r\n                            timeOutMs: timeOutMs,\r\n                            intervalMs: intervalMs\r\n                        })];\r\n                    case 1: return [2 /*return*/, _e.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Wait for an index task to be processed.\r\n     *\r\n     * @memberof Indexes\r\n     * @method waitForTask\r\n     * @param {number} taskId - Task identifier\r\n     * @param {WaitOptions} waitOptions - Options on timeout and interval\r\n     *\r\n     * @returns {Promise<Task>} - Promise containing an array of tasks\r\n     */\r\n    Index.prototype.waitForTask = function (taskId, _a) {\r\n        var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5000 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_e) {\r\n                switch (_e.label) {\r\n                    case 0: return [4 /*yield*/, this.tasks.waitForClientTask(taskId, {\r\n                            timeOutMs: timeOutMs,\r\n                            intervalMs: intervalMs\r\n                        })];\r\n                    case 1: return [2 /*return*/, _e.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ///\r\n    /// STATS\r\n    ///\r\n    /**\r\n     * get stats of an index\r\n     * @memberof Index\r\n     * @method getStats\r\n     * @returns {Promise<IndexStats>} Promise containing object with stats of the index\r\n     */\r\n    Index.prototype.getStats = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/stats\");\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ///\r\n    /// DOCUMENTS\r\n    ///\r\n    /**\r\n     * get documents of an index\r\n     * @memberof Index\r\n     * @method getDocuments\r\n     * @template T\r\n     * @param {GetDocumentsParams<T>} options? Options to browse the documents\r\n     * @returns {Promise<GetDocumentsResponse<T>>} Promise containing Document responses\r\n     */\r\n    Index.prototype.getDocuments = function (options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url, attr;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/documents\");\r\n                        if (options !== undefined && Array.isArray(options.attributesToRetrieve)) {\r\n                            attr = options.attributesToRetrieve.join(',');\r\n                        }\r\n                        return [4 /*yield*/, this.httpRequest.get(url, __assign(__assign({}, options), (attr !== undefined ? { attributesToRetrieve: attr } : {})))];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get one document\r\n     * @memberof Index\r\n     * @method getDocument\r\n     * @template T\r\n     * @param {string | number} documentId Document ID\r\n     * @returns {Promise<Document<T>>} Promise containing Document response\r\n     */\r\n    Index.prototype.getDocument = function (documentId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/documents/\").concat(documentId);\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Add or replace multiples documents to an index\r\n     * @memberof Index\r\n     * @method addDocuments\r\n     * @template T\r\n     * @param {Array<Document<T>>} documents Array of Document objects to add/replace\r\n     * @param {AddDocumentParams} options? Query parameters\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */\r\n    Index.prototype.addDocuments = function (documents, options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/documents\");\r\n                        return [4 /*yield*/, this.httpRequest.post(url, documents, options)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Add or replace multiples documents to an index in batches\r\n     * @memberof Index\r\n     * @method addDocumentsInBatches\r\n     * @template T\r\n     * @param {Array<Document<T>>} documents Array of Document objects to add/replace\r\n     * @param {number} batchSize Size of the batch\r\n     * @param {AddDocumentParams} options? Query parameters\r\n     * @returns {Promise<EnqueuedTasks>} Promise containing array of enqueued update objects for each batch\r\n     */\r\n    Index.prototype.addDocumentsInBatches = function (documents, batchSize, options) {\r\n        if (batchSize === void 0) { batchSize = 1000; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var updates, i, _a, _b;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        updates = [];\r\n                        i = 0;\r\n                        _c.label = 1;\r\n                    case 1:\r\n                        if (!(i < documents.length)) return [3 /*break*/, 4];\r\n                        _b = (_a = updates).push;\r\n                        return [4 /*yield*/, this.addDocuments(documents.slice(i, i + batchSize), options)];\r\n                    case 2:\r\n                        _b.apply(_a, [_c.sent()]);\r\n                        _c.label = 3;\r\n                    case 3:\r\n                        i += batchSize;\r\n                        return [3 /*break*/, 1];\r\n                    case 4: return [2 /*return*/, updates];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Add or update multiples documents to an index\r\n     * @memberof Index\r\n     * @method updateDocuments\r\n     * @param {Array<Document<Partial<T>>>} documents Array of Document objects to add/update\r\n     * @param {AddDocumentParams} options? Query parameters\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */\r\n    Index.prototype.updateDocuments = function (documents, options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/documents\");\r\n                        return [4 /*yield*/, this.httpRequest.put(url, documents, options)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Add or update multiples documents to an index in batches\r\n     * @memberof Index\r\n     * @method updateDocuments\r\n     * @template T\r\n     * @param {Array<Document<T>>} documents Array of Document objects to add/update\r\n     * @param {number} batchSize Size of the batch\r\n     * @param {AddDocumentParams} options? Query parameters\r\n     * @returns {Promise<EnqueuedTasks>} Promise containing array of enqueued update objects for each batch\r\n     */\r\n    Index.prototype.updateDocumentsInBatches = function (documents, batchSize, options) {\r\n        if (batchSize === void 0) { batchSize = 1000; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var updates, i, _a, _b;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        updates = [];\r\n                        i = 0;\r\n                        _c.label = 1;\r\n                    case 1:\r\n                        if (!(i < documents.length)) return [3 /*break*/, 4];\r\n                        _b = (_a = updates).push;\r\n                        return [4 /*yield*/, this.updateDocuments(documents.slice(i, i + batchSize), options)];\r\n                    case 2:\r\n                        _b.apply(_a, [_c.sent()]);\r\n                        _c.label = 3;\r\n                    case 3:\r\n                        i += batchSize;\r\n                        return [3 /*break*/, 1];\r\n                    case 4: return [2 /*return*/, updates];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Delete one document\r\n     * @memberof Index\r\n     * @method deleteDocument\r\n     * @param {string | number} documentId Id of Document to delete\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */\r\n    Index.prototype.deleteDocument = function (documentId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/documents/\").concat(documentId);\r\n                        return [4 /*yield*/, this.httpRequest[\"delete\"](url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Delete multiples documents of an index\r\n     * @memberof Index\r\n     * @method deleteDocuments\r\n     * @param {string[] | number[]} documentsIds Array of Document Ids to delete\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */\r\n    Index.prototype.deleteDocuments = function (documentsIds) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/documents/delete-batch\");\r\n                        return [4 /*yield*/, this.httpRequest.post(url, documentsIds)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Delete all documents of an index\r\n     * @memberof Index\r\n     * @method deleteAllDocuments\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */\r\n    Index.prototype.deleteAllDocuments = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/documents\");\r\n                        return [4 /*yield*/, this.httpRequest[\"delete\"](url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ///\r\n    /// SETTINGS\r\n    ///\r\n    /**\r\n     * Retrieve all settings\r\n     * @memberof Index\r\n     * @method getSettings\r\n     * @returns {Promise<Settings>} Promise containing Settings object\r\n     */\r\n    Index.prototype.getSettings = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings\");\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update all settings\r\n     * Any parameters not provided will be left unchanged.\r\n     * @memberof Index\r\n     * @method updateSettings\r\n     * @param {Settings} settings Object containing parameters with their updated values\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */\r\n    Index.prototype.updateSettings = function (settings) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings\");\r\n                        return [4 /*yield*/, this.httpRequest.post(url, settings)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Reset settings.\r\n     * @memberof Index\r\n     * @method resetSettings\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */\r\n    Index.prototype.resetSettings = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings\");\r\n                        return [4 /*yield*/, this.httpRequest[\"delete\"](url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ///\r\n    /// SYNONYMS\r\n    ///\r\n    /**\r\n     * Get the list of all synonyms\r\n     * @memberof Index\r\n     * @method getSynonyms\r\n     * @returns {Promise<object>} Promise containing object of synonym mappings\r\n     */\r\n    Index.prototype.getSynonyms = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/synonyms\");\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update the list of synonyms. Overwrite the old list.\r\n     * @memberof Index\r\n     * @method updateSynonyms\r\n     * @param {Synonyms} synonyms Mapping of synonyms with their associated words\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */\r\n    Index.prototype.updateSynonyms = function (synonyms) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/synonyms\");\r\n                        return [4 /*yield*/, this.httpRequest.post(url, synonyms)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Reset the synonym list to be empty again\r\n     * @memberof Index\r\n     * @method resetSynonyms\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */\r\n    Index.prototype.resetSynonyms = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/synonyms\");\r\n                        return [4 /*yield*/, this.httpRequest[\"delete\"](url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ///\r\n    /// STOP WORDS\r\n    ///\r\n    /**\r\n     * Get the list of all stop-words\r\n     * @memberof Index\r\n     * @method getStopWords\r\n     * @returns {Promise<string[]>} Promise containing array of stop-words\r\n     */\r\n    Index.prototype.getStopWords = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/stop-words\");\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update the list of stop-words. Overwrite the old list.\r\n     * @memberof Index\r\n     * @method updateStopWords\r\n     * @param {StopWords} stopWords Array of strings that contains the stop-words.\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */\r\n    Index.prototype.updateStopWords = function (stopWords) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/stop-words\");\r\n                        return [4 /*yield*/, this.httpRequest.post(url, stopWords)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Reset the stop-words list to be empty again\r\n     * @memberof Index\r\n     * @method resetStopWords\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */\r\n    Index.prototype.resetStopWords = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/stop-words\");\r\n                        return [4 /*yield*/, this.httpRequest[\"delete\"](url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ///\r\n    /// RANKING RULES\r\n    ///\r\n    /**\r\n     * Get the list of all ranking-rules\r\n     * @memberof Index\r\n     * @method getRankingRules\r\n     * @returns {Promise<string[]} Promise containing array of ranking-rules\r\n     */\r\n    Index.prototype.getRankingRules = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/ranking-rules\");\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update the list of ranking-rules. Overwrite the old list.\r\n     * @memberof Index\r\n     * @method updateRankingRules\r\n     * @param {RankingRules} rankingRules Array that contain ranking rules sorted by order of importance.\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */\r\n    Index.prototype.updateRankingRules = function (rankingRules) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/ranking-rules\");\r\n                        return [4 /*yield*/, this.httpRequest.post(url, rankingRules)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Reset the ranking rules list to its default value\r\n     * @memberof Index\r\n     * @method resetRankingRules\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */\r\n    Index.prototype.resetRankingRules = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/ranking-rules\");\r\n                        return [4 /*yield*/, this.httpRequest[\"delete\"](url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ///\r\n    /// DISTINCT ATTRIBUTE\r\n    ///\r\n    /**\r\n     * Get the distinct-attribute\r\n     * @memberof Index\r\n     * @method getDistinctAttribute\r\n     * @returns {Promise<string | null>} Promise containing the distinct-attribute of the index\r\n     */\r\n    Index.prototype.getDistinctAttribute = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/distinct-attribute\");\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update the distinct-attribute.\r\n     * @memberof Index\r\n     * @method updateDistinctAttribute\r\n     * @param {DistinctAttribute} distinctAttribute Field name of the distinct-attribute\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */\r\n    Index.prototype.updateDistinctAttribute = function (distinctAttribute) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/distinct-attribute\");\r\n                        return [4 /*yield*/, this.httpRequest.post(url, distinctAttribute)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Reset the distinct-attribute.\r\n     * @memberof Index\r\n     * @method resetDistinctAttribute\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */\r\n    Index.prototype.resetDistinctAttribute = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/distinct-attribute\");\r\n                        return [4 /*yield*/, this.httpRequest[\"delete\"](url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ///\r\n    /// FILTERABLE ATTRIBUTES\r\n    ///\r\n    /**\r\n     * Get the filterable-attributes\r\n     * @memberof Index\r\n     * @method getFilterableAttributes\r\n     * @returns {Promise<string[]>} Promise containing an array of filterable-attributes\r\n     */\r\n    Index.prototype.getFilterableAttributes = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/filterable-attributes\");\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update the filterable-attributes.\r\n     * @memberof Index\r\n     * @method updateFilterableAttributes\r\n     * @param {FilterableAttributes} filterableAttributes Array of strings containing the attributes that can be used as filters at query time\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */\r\n    Index.prototype.updateFilterableAttributes = function (filterableAttributes) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/filterable-attributes\");\r\n                        return [4 /*yield*/, this.httpRequest.post(url, filterableAttributes)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Reset the filterable-attributes.\r\n     * @memberof Index\r\n     * @method resetFilterableAttributes\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */\r\n    Index.prototype.resetFilterableAttributes = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/filterable-attributes\");\r\n                        return [4 /*yield*/, this.httpRequest[\"delete\"](url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ///\r\n    /// SORTABLE ATTRIBUTES\r\n    ///\r\n    /**\r\n     * Get the sortable-attributes\r\n     * @memberof Index\r\n     * @method getSortableAttributes\r\n     * @returns {Promise<string[]>} Promise containing array of sortable-attributes\r\n     */\r\n    Index.prototype.getSortableAttributes = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/sortable-attributes\");\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update the sortable-attributes.\r\n     * @memberof Index\r\n     * @method updateSortableAttributes\r\n     * @param {SortableAttributes} sortableAttributes Array of strings containing the attributes that can be used to sort search results at query time\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */\r\n    Index.prototype.updateSortableAttributes = function (sortableAttributes) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/sortable-attributes\");\r\n                        return [4 /*yield*/, this.httpRequest.post(url, sortableAttributes)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Reset the sortable-attributes.\r\n     * @memberof Index\r\n     * @method resetSortableAttributes\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */\r\n    Index.prototype.resetSortableAttributes = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/sortable-attributes\");\r\n                        return [4 /*yield*/, this.httpRequest[\"delete\"](url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ///\r\n    /// SEARCHABLE ATTRIBUTE\r\n    ///\r\n    /**\r\n     * Get the searchable-attributes\r\n     * @memberof Index\r\n     * @method getSearchableAttributes\r\n     * @returns {Promise<string[]>} Promise containing array of searchable-attributes\r\n     */\r\n    Index.prototype.getSearchableAttributes = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/searchable-attributes\");\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update the searchable-attributes.\r\n     * @memberof Index\r\n     * @method updateSearchableAttributes\r\n     * @param {SearchableAttributes} searchableAttributes Array of strings that contains searchable attributes sorted by order of importance(most to least important)\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */\r\n    Index.prototype.updateSearchableAttributes = function (searchableAttributes) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/searchable-attributes\");\r\n                        return [4 /*yield*/, this.httpRequest.post(url, searchableAttributes)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Reset the searchable-attributes.\r\n     * @memberof Index\r\n     * @method resetSearchableAttributes\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued task\r\n     */\r\n    Index.prototype.resetSearchableAttributes = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/searchable-attributes\");\r\n                        return [4 /*yield*/, this.httpRequest[\"delete\"](url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ///\r\n    /// DISPLAYED ATTRIBUTE\r\n    ///\r\n    /**\r\n     * Get the displayed-attributes\r\n     * @memberof Index\r\n     * @method getDisplayedAttributes\r\n     * @returns {Promise<string[]>} Promise containing array of displayed-attributes\r\n     */\r\n    Index.prototype.getDisplayedAttributes = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/displayed-attributes\");\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update the displayed-attributes.\r\n     * @memberof Index\r\n     * @method updateDisplayedAttributes\r\n     * @param {DisplayedAttributes} displayedAttributes Array of strings that contains attributes of an index to display\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */\r\n    Index.prototype.updateDisplayedAttributes = function (displayedAttributes) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/displayed-attributes\");\r\n                        return [4 /*yield*/, this.httpRequest.post(url, displayedAttributes)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Reset the displayed-attributes.\r\n     * @memberof Index\r\n     * @method resetDisplayedAttributes\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */\r\n    Index.prototype.resetDisplayedAttributes = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/displayed-attributes\");\r\n                        return [4 /*yield*/, this.httpRequest[\"delete\"](url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ///\r\n    /// TYPO TOLERANCE\r\n    ///\r\n    /**\r\n     * Get the typo tolerance settings.\r\n     * @memberof Index\r\n     * @method getTypoTolerance\r\n     * @returns {Promise<string[]>} Promise containing the typo tolerance settings.\r\n     */\r\n    Index.prototype.getTypoTolerance = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/typo-tolerance\");\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update the typo tolerance settings.\r\n     * @memberof Index\r\n     * @method updateTypoTolerance\r\n     * @param {TypoTolerance} typoTolerance Object containing the custom typo tolerance settings.\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */\r\n    Index.prototype.updateTypoTolerance = function (typoTolerance) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/typo-tolerance\");\r\n                        return [4 /*yield*/, this.httpRequest.post(url, typoTolerance)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Reset the typo tolerance settings.\r\n     * @memberof Index\r\n     * @method resetTypoTolerance\r\n     * @returns {Promise<EnqueuedTask>} Promise containing object of the enqueued update\r\n     */\r\n    Index.prototype.resetTypoTolerance = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes/\".concat(this.uid, \"/settings/typo-tolerance\");\r\n                        return [4 /*yield*/, this.httpRequest[\"delete\"](url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return Index;\r\n}());\n\n/*\r\n * Bundle: MeiliSearch\r\n * Project: MeiliSearch - Javascript API\r\n * Author: Quentin de Quelen <quentin@meilisearch.com>\r\n * Copyright: 2019, MeiliSearch\r\n */\r\nvar Client = /** @class */ (function () {\r\n    /**\r\n     * Creates new MeiliSearch instance\r\n     * @param {Config} config Configuration object\r\n     */\r\n    function Client(config) {\r\n        this.config = config;\r\n        this.httpRequest = new HttpRequests(config);\r\n        this.tasks = new TaskClient(config);\r\n    }\r\n    /**\r\n     * Return an Index instance\r\n     * @memberof MeiliSearch\r\n     * @method index\r\n     * @template T\r\n     * @param {string} indexUid The index UID\r\n     * @returns {Index<T>} Instance of Index\r\n     */\r\n    Client.prototype.index = function (indexUid) {\r\n        return new Index(this.config, indexUid);\r\n    };\r\n    /**\r\n     * Gather information about an index by calling MeiliSearch and\r\n     * return an Index instance with the gathered information\r\n     * @memberof MeiliSearch\r\n     * @method getIndex\r\n     * @template T\r\n     * @param {string} indexUid The index UID\r\n     * @returns {Promise<Index<T>>} Promise returning Index instance\r\n     */\r\n    Client.prototype.getIndex = function (indexUid) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, new Index(this.config, indexUid).fetchInfo()];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Gather information about an index by calling MeiliSearch and\r\n     * return the raw JSON response\r\n     * @memberof MeiliSearch\r\n     * @method getRawIndex\r\n     * @param {string} indexUid The index UID\r\n     * @returns {Promise<IndexResponse>} Promise returning index information\r\n     */\r\n    Client.prototype.getRawIndex = function (indexUid) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, new Index(this.config, indexUid).getRawInfo()];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get all the indexes as Index instances.\r\n     * @memberof MeiliSearch\r\n     * @method getIndexes\r\n     * @returns {Promise<Index[]>} Promise returning array of raw index information\r\n     */\r\n    Client.prototype.getIndexes = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response, indexes;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getRawIndexes()];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        indexes = response.map(function (index) { return new Index(_this.config, index.uid, index.primaryKey); });\r\n                        return [2 /*return*/, indexes];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get all the indexes in their raw value (no Index instances).\r\n     * @memberof MeiliSearch\r\n     * @method getRawIndexes\r\n     * @returns {Promise<IndexResponse[]>} Promise returning array of raw index information\r\n     */\r\n    Client.prototype.getRawIndexes = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"indexes\";\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Create a new index\r\n     * @memberof MeiliSearch\r\n     * @method createIndex\r\n     * @template T\r\n     * @param {string} uid The index UID\r\n     * @param {IndexOptions} options Index options\r\n     * @returns {Promise<Index<T>>} Promise returning Index instance\r\n     */\r\n    Client.prototype.createIndex = function (uid, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, Index.create(uid, options, this.config)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update an index\r\n     * @memberof MeiliSearch\r\n     * @method updateIndex\r\n     * @template T\r\n     * @param {string} uid The index UID\r\n     * @param {IndexOptions} options Index options to update\r\n     * @returns {Promise<Index<T>>} Promise returning Index instance after updating\r\n     */\r\n    Client.prototype.updateIndex = function (uid, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, new Index(this.config, uid).update(options)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Delete an index\r\n     * @memberof MeiliSearch\r\n     * @method deleteIndex\r\n     * @param {string} uid The index UID\r\n     * @returns {Promise<void>} Promise which resolves when index is deleted successfully\r\n     */\r\n    Client.prototype.deleteIndex = function (uid) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, new Index(this.config, uid)[\"delete\"]()];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Deletes an index if it already exists.\r\n     * @memberof MeiliSearch\r\n     * @method deleteIndexIfExists\r\n     * @param {string} uid The index UID\r\n     * @returns {Promise<boolean>} Promise which resolves to true when index exists and is deleted successfully, otherwise false if it does not exist\r\n     */\r\n    Client.prototype.deleteIndexIfExists = function (uid) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.deleteIndex(uid)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/, true];\r\n                    case 2:\r\n                        e_1 = _a.sent();\r\n                        if (e_1.code === \"index_not_found\" /* INDEX_NOT_FOUND */) {\r\n                            return [2 /*return*/, false];\r\n                        }\r\n                        throw e_1;\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ///\r\n    /// TASKS\r\n    ///\r\n    /**\r\n     * Get the list of all client tasks\r\n     * @memberof MeiliSearch\r\n     * @method getTasks\r\n     * @returns {Promise<Result<Task[]>>} - Promise returning all tasks\r\n     */\r\n    Client.prototype.getTasks = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.tasks.getClientTasks()];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get one task on the client scope\r\n     * @memberof MeiliSearch\r\n     * @method getTask\r\n     * @param {number} taskId - Task identifier\r\n     * @returns {Promise<Task>} - Promise returning a task\r\n     */\r\n    Client.prototype.getTask = function (taskId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.tasks.getClientTask(taskId)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Wait for a batch of tasks to be processed.\r\n     * @memberof MeiliSearch\r\n     * @method waitForTasks\r\n     * @param {number[]} taskIds - Tasks identifier\r\n     * @param {WaitOptions} waitOptions - Options on timeout and interval\r\n     *\r\n     * @returns {Promise<Result<Task[]>>} - Promise returning an array of tasks\r\n     */\r\n    Client.prototype.waitForTasks = function (taskIds, _a) {\r\n        var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5000 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_e) {\r\n                switch (_e.label) {\r\n                    case 0: return [4 /*yield*/, this.tasks.waitForClientTasks(taskIds, {\r\n                            timeOutMs: timeOutMs,\r\n                            intervalMs: intervalMs\r\n                        })];\r\n                    case 1: return [2 /*return*/, _e.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Wait for a task to be processed.\r\n     *\r\n     * @memberof MeiliSearch\r\n     * @method waitForTask\r\n     * @param {number} taskId - Task identifier\r\n     * @param {WaitOptions} waitOptions - Options on timeout and interval\r\n     *\r\n     * @returns {Promise<Task>} - Promise returning an array of tasks\r\n     */\r\n    Client.prototype.waitForTask = function (taskId, _a) {\r\n        var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5000 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_e) {\r\n                switch (_e.label) {\r\n                    case 0: return [4 /*yield*/, this.tasks.waitForClientTask(taskId, {\r\n                            timeOutMs: timeOutMs,\r\n                            intervalMs: intervalMs\r\n                        })];\r\n                    case 1: return [2 /*return*/, _e.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ///\r\n    /// KEYS\r\n    ///\r\n    /**\r\n     * Get all API keys\r\n     * @memberof MeiliSearch\r\n     * @method getKeys\r\n     * @returns {Promise<Keys>} Promise returning an object with keys\r\n     */\r\n    Client.prototype.getKeys = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"keys\";\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get one API key\r\n     * @memberof MeiliSearch\r\n     * @method getKey\r\n     *\r\n     * @param {string} key - Key\r\n     * @returns {Promise<Keys>} Promise returning a key\r\n     */\r\n    Client.prototype.getKey = function (key) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"keys/\".concat(key);\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Create one API key\r\n     * @memberof MeiliSearch\r\n     * @method createKey\r\n     *\r\n     * @param {KeyPayload} options - Key options\r\n     * @returns {Promise<Key>} Promise returning an object with keys\r\n     */\r\n    Client.prototype.createKey = function (options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"keys\";\r\n                        return [4 /*yield*/, this.httpRequest.post(url, options)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update one API key\r\n     * @memberof MeiliSearch\r\n     * @method updateKey\r\n     *\r\n     * @param {string} key - Key\r\n     * @param {KeyPayload} options - Key options\r\n     * @returns {Promise<Key>} Promise returning an object with keys\r\n     */\r\n    Client.prototype.updateKey = function (key, options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"keys/\".concat(key);\r\n                        return [4 /*yield*/, this.httpRequest.patch(url, options)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Delete one API key\r\n     * @memberof MeiliSearch\r\n     * @method deleteKey\r\n     *\r\n     * @param {string} key - Key\r\n     * @returns {Promise<Void>}\r\n     */\r\n    Client.prototype.deleteKey = function (key) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"keys/\".concat(key);\r\n                        return [4 /*yield*/, this.httpRequest[\"delete\"](url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ///\r\n    /// HEALTH\r\n    ///\r\n    /**\r\n     * Checks if the server is healthy, otherwise an error will be thrown.\r\n     * @memberof MeiliSearch\r\n     * @method health\r\n     * @returns {Promise<Health>} Promise returning an object with health details\r\n     */\r\n    Client.prototype.health = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"health\";\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Checks if the server is healthy, return true or false.\r\n     * @memberof MeiliSearch\r\n     * @method isHealthy\r\n     * @returns {Promise<boolean>} Promise returning a boolean\r\n     */\r\n    Client.prototype.isHealthy = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        url = \"health\";\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/, true];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/, false];\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ///\r\n    /// STATS\r\n    ///\r\n    /**\r\n     * Get the stats of all the database\r\n     * @memberof MeiliSearch\r\n     * @method getStats\r\n     * @returns {Promise<Stats>} Promise returning object of all the stats\r\n     */\r\n    Client.prototype.getStats = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"stats\";\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ///\r\n    /// VERSION\r\n    ///\r\n    /**\r\n     * Get the version of MeiliSearch\r\n     * @memberof MeiliSearch\r\n     * @method getVersion\r\n     * @returns {Promise<Version>} Promise returning object with version details\r\n     */\r\n    Client.prototype.getVersion = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"version\";\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ///\r\n    /// DUMPS\r\n    ///\r\n    /**\r\n     * Triggers a dump creation process\r\n     * @memberof MeiliSearch\r\n     * @method createDump\r\n     * @returns {Promise<EnqueuedDump>} Promise returning object of the enqueued update\r\n     */\r\n    Client.prototype.createDump = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"dumps\";\r\n                        return [4 /*yield*/, this.httpRequest.post(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get the status of a dump creation process\r\n     * @memberof MeiliSearch\r\n     * @method getDumpStatus\r\n     * @param {string} dumpUid Dump UID\r\n     * @returns {Promise<EnqueuedDump>} Promise returning object of the enqueued update\r\n     */\r\n    Client.prototype.getDumpStatus = function (dumpUid) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var url;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        url = \"dumps/\".concat(dumpUid, \"/status\");\r\n                        return [4 /*yield*/, this.httpRequest.get(url)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Generate a tenant token\r\n     *\r\n     * @memberof MeiliSearch\r\n     * @method generateTenantToken\r\n     * @param {SearchRules} searchRules Search rules that are applied to every search.\r\n     * @param {TokenOptions} options Token options to customize some aspect of the token.\r\n     * @returns {String} The token in JWT format.\r\n     */\r\n    Client.prototype.generateTenantToken = function (_searchRules, _options) {\r\n        var error = new Error();\r\n        throw new Error(\"Meilisearch: failed to generate a tenant token. Generation of a token only works in a node environment \\n \".concat(error.stack, \".\"));\r\n    };\r\n    return Client;\r\n}());\n\nfunction encode64(data) {\r\n    return Buffer.from(JSON.stringify(data)).toString('base64');\r\n}\r\n/**\r\n * Create the header of the token.\r\n *\r\n * @param {String} apiKey API key used to sign the token.\r\n * @param {String} encodedHeader Header of the token in base64.\r\n * @param {String} encodedPayload Payload of the token in base64.\r\n * @returns {String} The signature of the token in base64.\r\n */\r\nfunction sign(apiKey, encodedHeader, encodedPayload) {\r\n    return crypto__default[\"default\"]\r\n        .createHmac('sha256', apiKey)\r\n        .update(\"\".concat(encodedHeader, \".\").concat(encodedPayload))\r\n        .digest('base64')\r\n        .replace(/\\+/g, '-')\r\n        .replace(/\\//g, '_')\r\n        .replace(/=/g, '');\r\n}\r\n/**\r\n * Create the header of the token.\r\n *\r\n * @returns {String} The header encoded in base64.\r\n */\r\nfunction createHeader() {\r\n    var header = {\r\n        alg: 'HS256',\r\n        typ: 'JWT'\r\n    };\r\n    return encode64(header).replace(/=/g, '');\r\n}\r\n/**\r\n * Validate the parameter used for the payload of the token.\r\n *\r\n * @param {SearchRules} searchRules Search rules that are applied to every search.\r\n * @param {String} apiKey Api key used as issuer of the token.\r\n * @param {Date | undefined} expiresAt Date at which the token expires.\r\n */\r\nfunction validatePayload(payloadParams) {\r\n    var searchRules = payloadParams.searchRules, apiKey = payloadParams.apiKey, expiresAt = payloadParams.expiresAt;\r\n    var error = new Error();\r\n    if (expiresAt) {\r\n        if (!(expiresAt instanceof Date) || expiresAt.getTime() < Date.now()) {\r\n            throw new Error(\"Meilisearch: When the expiresAt field in the token generation has a value, it must be a date set in the future and not in the past. \\n \".concat(error.stack, \".\"));\r\n        }\r\n    }\r\n    if (searchRules) {\r\n        if (!(typeof searchRules === 'object' || Array.isArray(searchRules))) {\r\n            throw new Error(\"Meilisearch: The search rules added in the token generation must be of type array or object. \\n \".concat(error.stack, \".\"));\r\n        }\r\n    }\r\n    if (!apiKey || typeof apiKey !== 'string') {\r\n        throw new Error(\"Meilisearch: The API key used for the token generation must exist and be of type string. \\n \".concat(error.stack, \".\"));\r\n    }\r\n}\r\n/**\r\n * Create the payload of the token.\r\n *\r\n * @param {SearchRules} searchRules Search rules that are applied to every search.\r\n * @param {String} apiKey Api key used as issuer of the token.\r\n * @param {Date | undefined} expiresAt Date at which the token expires.\r\n * @returns {String} The payload encoded in base64.\r\n */\r\nfunction createPayload(payloadParams) {\r\n    var searchRules = payloadParams.searchRules, apiKey = payloadParams.apiKey, expiresAt = payloadParams.expiresAt;\r\n    validatePayload(payloadParams);\r\n    var payload = {\r\n        searchRules: searchRules,\r\n        apiKeyPrefix: apiKey.substring(0, 8),\r\n        exp: expiresAt === null || expiresAt === void 0 ? void 0 : expiresAt.getTime()\r\n    };\r\n    return encode64(payload).replace(/=/g, '');\r\n}\r\nvar Token = /** @class */ (function () {\r\n    function Token(config) {\r\n        this.config = config;\r\n    }\r\n    /**\r\n     * Generate a tenant token\r\n     *\r\n     * @memberof MeiliSearch\r\n     * @method generateTenantToken\r\n     * @param {SearchRules} searchRules Search rules that are applied to every search.\r\n     * @param {TokenOptions} options Token options to customize some aspect of the token.\r\n     * @returns {String} The token in JWT format.\r\n     */\r\n    Token.prototype.generateTenantToken = function (searchRules, options) {\r\n        var apiKey = (options === null || options === void 0 ? void 0 : options.apiKey) || this.config.apiKey || '';\r\n        var expiresAt = options === null || options === void 0 ? void 0 : options.expiresAt;\r\n        var encodedHeader = createHeader();\r\n        var encodedPayload = createPayload({ searchRules: searchRules, apiKey: apiKey, expiresAt: expiresAt });\r\n        var signature = sign(apiKey, encodedHeader, encodedPayload);\r\n        return \"\".concat(encodedHeader, \".\").concat(encodedPayload, \".\").concat(signature);\r\n    };\r\n    return Token;\r\n}());\n\nvar MeiliSearch = /** @class */ (function (_super) {\r\n    __extends(MeiliSearch, _super);\r\n    function MeiliSearch(config) {\r\n        var _this = _super.call(this, config) || this;\r\n        _this.tokens = new Token(config);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Generate a tenant token\r\n     *\r\n     * @memberof MeiliSearch\r\n     * @method generateTenantToken\r\n     * @param {SearchRules} searchRules Search rules that are applied to every search.\r\n     * @param {TokenOptions} options Token options to customize some aspect of the token.\r\n     * @returns {String} The token in JWT format.\r\n     */\r\n    MeiliSearch.prototype.generateTenantToken = function (searchRules, options) {\r\n        if (typeof window === 'undefined') {\r\n            return this.tokens.generateTenantToken(searchRules, options);\r\n        }\r\n        return _super.prototype.generateTenantToken.call(this, searchRules, options);\r\n    };\r\n    return MeiliSearch;\r\n}(Client));\n\nexports.HttpRequests = HttpRequests;\nexports.Index = Index;\nexports.MeiliSearch = MeiliSearch;\nexports.MeiliSearchApiError = MeiliSearchApiError;\nexports.MeiliSearchCommunicationError = MeiliSearchCommunicationError;\nexports.MeiliSearchError = MeiliSearchError;\nexports.MeiliSearchTimeOutError = MeiliSearchTimeOutError;\nexports.addProtocolIfNotPresent = addProtocolIfNotPresent;\nexports.addTrailingSlash = addTrailingSlash;\nexports[\"default\"] = MeiliSearch;\nexports.httpErrorHandler = httpErrorHandler;\nexports.httpResponseErrorHandler = httpResponseErrorHandler;\nexports.removeUndefinedFromObject = removeUndefinedFromObject;\nexports.sleep = sleep;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/meilisearch/dist/bundles/meilisearch.cjs.js\n");

/***/ })

};
;