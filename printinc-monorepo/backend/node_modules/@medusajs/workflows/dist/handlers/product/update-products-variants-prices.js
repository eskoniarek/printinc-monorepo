"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateProductsVariantsPrices = void 0;
const utils_1 = require("@medusajs/utils");
async function updateProductsVariantsPrices({ container, context, data, }) {
    const { manager } = context;
    const products = data.products;
    const productsHandleVariantsIndexPricesMap = data.productsHandleVariantsIndexPricesMap;
    const productVariantService = container.resolve("productVariantService");
    const productVariantServiceTx = productVariantService.withTransaction(manager);
    const variantIdsPricesData = [];
    const productsMap = new Map(products.map((p) => [p.handle, p]));
    for (const mapData of productsHandleVariantsIndexPricesMap.entries()) {
        const [handle, variantData] = mapData;
        const product = productsMap.get(handle);
        if (!product) {
            throw new utils_1.MedusaError(utils_1.MedusaError.Types.INVALID_DATA, `Product with handle ${handle} not found`);
        }
        variantData.forEach((item, index) => {
            const variant = product.variants[index];
            variantIdsPricesData.push({
                variantId: variant.id,
                prices: item.prices,
            });
        });
    }
    await productVariantServiceTx.updateVariantPrices(variantIdsPricesData);
}
exports.updateProductsVariantsPrices = updateProductsVariantsPrices;
updateProductsVariantsPrices.aliases = {
    products: "products",
};
//# sourceMappingURL=update-products-variants-prices.js.map